door	NP	#x.door(x)	0.0
door	N	#x.door(x)	0.0
door	N	#x486.#x475.turn(until(is(door(x486),x475)))	-1.0
door	N	#x490.#x477.turn(until(is(door(x490),at(x477))))	-1.0
door	N	#x618.#x611.#x605.#x603.x603 @ that(is(door(x618),at(x605,x611)))	-1.0
door	N	#x620.#x612.#x606.#x604.x604 @ verify(that(is(door(x620),at(x606,x612))))	-1.0
main	N/N	#x.x @ main	0.0
your	NP/N	#x.at(x)	0.0
your	NP/N	#x.x	0.0
your	NP/N	#x616.#x612.#x606.#x604.x604 @ verify(thyourt(is(x616,yourt(x606,x612))))	-1.0
your	NP/N	#x.x @ your	-1.0
your	NP/N	#x615.#x611.#x605.#x603.x603 @ thyourt(is(x615,yourt(x605,x611)))	-1.0
your	NP/N	l(x,x)	-1.0
red	N/N	#x.x @ red	0.0
red	N/N	#x619.#x612.#x606.#x604.x604 @ verify(that(is(x619 @ red,at(x606,x612))))	-1.0
red	N/N	#x617.#x611.#x605.#x603.x603 @ that(is(x617 @ red,at(x605,x611)))	-1.0
red	N/N	#x485.#x475.turn(until(is(x485 @ red,x475)))	-1.0
red	N/N	#x489.#x477.turn(until(is(x489 @ red,at(x477))))	-1.0
red	N/N	l(x,x)	-1.0
should	(S\NP)/(S\NP)	#x.x	0.0
should	(S\NP)/(S\NP)	#x.x @ #y.#z.z @ that(y)	0.0
should	(S\NP)/(S\NP)	#x.#y.y @ that(x)	0.0
should	(S\NP)/(S\NP)	l(x,x)	-1.0
should	(S\NP)/(S\NP)	#x686.#x588.x588 @ that(is(x686))	-1.0
should	(S\NP)/(S\NP)	#x773.x773 @ #x772.#x589.x589 @ verify(that(x772))	-1.0
should	(S\NP)/(S\NP)	#x775.x775 @ #x774.#x589.x589 @ verify(x774)	-1.0
should	(S\NP)/(S\NP)	#x776.#x589.x589 @ verify(that(x776))	-1.0
west	NP	west	0.0
west	N	west	0.0
from	((S\NP)\(S\NP))/NP	#x.x	0.0
from	((S\NP)\(S\NP))/NP	#x613.#x611.#x605.#x603.x603 @ that(is(x613,at(x605,x611)))	-1.0
from	((S\NP)\(S\NP))/NP	#x614.#x612.#x606.#x604.x604 @ verify(that(is(x614,at(x606,x612))))	-1.0
from	((S\NP)\(S\NP))/NP	l(x,x)	-1.0
from	(NP\NP)/NP	#x.#y.until(is(x,y))	0.0
locked	N/N	#x.x @ locked	0.0
locked	N/N	#x617.#x611.#x605.#x603.x603 @ that(is(x617 @ locked,at(x605,x611)))	-1.0
locked	N/N	#x619.#x612.#x606.#x604.x604 @ verify(that(is(x619 @ locked,at(x606,x612))))	-1.0
locked	N/N	#x485.#x475.turn(until(is(x485 @ locked,x475)))	-1.0
locked	N/N	#x489.#x477.turn(until(is(x489 @ locked,at(x477))))	-1.0
locked	N/N	l(x,x)	-1.0
you	NP	#x.verify(x)	0.0
you	NP	#x.x	0.0
you	NP	#x.you(x)	-1.0
you	NP	you	-1.0
you	NP	l(x,x)	-1.0
you	NP/NP	#x.is(x)	0.0
you	NP/NP	#x.x	0.0
you	NP/NP	#x572.#x570.#x568.x568 @ you(x570,x572)	-1.0
you	NP/NP	#x.x @ #y.you(y)	-1.0
you	NP/NP	#x.#y.x @ you(y)	-1.0
you	NP/NP	#x571.#x569.you(x569,x571)	-1.0
you	NP/NP	#x587.#x574.x574 @ verify(thyou(is(x587)))	-1.0
you	NP/NP	#x584.#x573.x573 @ thyou(is(x584))	-1.0
you	NP/NP	l(x,x)	-1.0
glass	N/N	#x.x @ glass	0.0
hallway	N	#x.hallway(x)	0.0
hallway	N	#x.x @ #y.#z.hallway(z @ y)	0.0
in	(NP\NP)/NP	#x491.#x478.turn(until(is(x478,x491)))	-1.0
in	(NP\NP)/NP	#x502.#x500.x500 @ x502	-1.0
in	(NP\NP)/NP	#x.#y.is(y,at(x))	0.0
in	(NP\NP)/NP	#x.#y.until(is(x,y))	-1.0
in	(NP\NP)/NP	#x.#y.#z.z @ is(x,at(y))	-1.0
in	(NP\NP)/NP	l(x,x)	-1.0
in	(NP\NP)/NP	#x.#y.#z.is(y,at(x,z))	-1.0
in	(NP\NP)/NP	#x.#y.is(x,at(y))	-1.0
in	(NP\NP)/NP	#x.at(x)	-1.0
in	(NP\NP)/NP	#x.#y.is(y,x)	-1.0
in	(NP\NP)/NP	#x492.#x478.turn(until(is(x478,at(x492))))	-1.0
in	(NP\NP)/NP	#x526.#x524.x524 @ #x522.x522 @ is(x526)	-1.0
in	(NP\NP)/NP	#x.#y.y @ at(x)	-1.0
in	(NP\NP)/NP	#x525.#x523.x523 @ is(x525)	-1.0
in	NP/NP	#x.x	0.0
old	N/N	#x.x @ old	0.0
old	N/N	#x619.#x612.#x606.#x604.x604 @ verify(that(is(x619 @ old,at(x606,x612))))	-1.0
old	N/N	#x617.#x611.#x605.#x603.x603 @ that(is(x617 @ old,at(x605,x611)))	-1.0
old	N/N	#x485.#x475.turn(until(is(x485 @ old,x475)))	-1.0
old	N/N	#x489.#x477.turn(until(is(x489 @ old,at(x477))))	-1.0
old	N/N	l(x,x)	-1.0
is	N	#x.x	0.0
is	N	#x.#y.is(x,y)	0.0
is	N	#x.#y.is(y,x)	0.0
is	NP/NP	#x571.#x569.is(x569,x571)	-1.0
is	NP/NP	#x572.#x570.#x568.x568 @ is(x570,x572)	-1.0
an	NP/N	#x.x	0.0
steps	N	#x494.steps(x494)	-1.0
take	S/NP	#x465.turn(x465)	-1.0
2	NP/N	#x.x @ 2	0.0
2	NP/N	#x616.#x612.#x606.#x604.x604 @ verify(th2t(is(x616,2t(x606,x612))))	-1.0
2	NP/N	#x615.#x611.#x605.#x603.x603 @ th2t(is(x615,2t(x605,x611)))	-1.0
2	NP/N	l(x,x)	-1.0
at	(NP\NP)/NP	#x.x	0.0
at	(NP\NP)/NP	#x.#y.is(y,x)	0.0
at	(NP\NP)/NP	#x.#y.y @ is(x)	0.0
at	NP/NP	#x584.#x573.x573 @ that(is(x584))	-1.0
at	NP/NP	#x.at(x)	0.0
at	NP/NP	#x585.#x577.x577 @ is(x585)	-1.0
at	NP/NP	#x585.x585	-1.0
at	NP/NP	#x586.is(x586)	-1.0
at	NP/NP	#x587.#x574.x574 @ verify(that(is(x587)))	-1.0
at	NP/NP	#x572.#x570.#x568.x568 @ at(x570,x572)	-1.0
at	NP/NP	#x.x @ #y.at(y)	-1.0
at	NP/NP	#x.#y.x @ at(y)	-1.0
at	NP/NP	#x571.#x569.at(x569,x571)	-1.0
at	NP/NP	l(x,x)	-1.0
left	N	left	0.0
left	NP	left	0.0
carpet	N	#x.carpet(x)	0.0
plant	N	#x.plant(x)	0.0
spaces	N	#x.spaces(x)	0.0
steel	N/N	#x.x @ steel	0.0
away	(S\NP)\(S\NP)	#x.x	0.0
away	(S\NP)\(S\NP)	l(x,x)	-1.0
away	NP	at(back)	0.0
away	NP	at(south)	-1.0
be	S\NP	#x.x	0.0
be	(S\NP)/NP	#x.is(x)	0.0
be	(S\NP)/NP	#x.x	0.0
be	(S\NP)/NP	l(x,x)	-1.0
south	NP	south	0.0
south	N	south	0.0
north	N	north	0.0
north	NP	north	0.0
yellow	N/N	#x.x @ yellow	0.0
facing	S/NP	#x.turn(x)	0.0
turn	S/NP	#x.turn(x)	0.0
turn	S/NP	l(x,x)	-1.0
turn	S/NP	#x727.#x467.x727 @ turn(x467)	-1.0
east	N	east	0.0
east	NP	east	0.0
see	(S\(S\NP))/NP	#x.#y.y @ is(x)	0.0
see	(S\S)/NP	#x534.#x532.x532 @ is(x534)	-1.0
see	(S\NP)/NP	#x.x	0.0
modern	N/N	#x.x @ modern	0.0
are	NP	#x.x	0.0
are	NP	#x.are(x)	-1.0
are	NP	are	-1.0
are	NP	l(x,x)	-1.0
are	NP/NP	#x.x	0.0
by	((S\NP)\(S\NP))/NP	#x.#y.y @ is(x)	0.0
by	((S\NP)\(S\NP))/NP	#x.#y.y @ #z.z @ is(x)	0.0
by	(NP\NP)/NP	#x525.#x523.x523 @ is(x525)	-1.0
by	(NP\NP)/NP	#x526.#x524.x524 @ #x522.x522 @ is(x526)	-1.0
by	(NP\NP)/NP	#x544.#x541.x541 @ x544	-1.0
now	(S\NP)/(S\NP)	#x.x	0.0
of	(NP\NP)/NP	#x.x	0.0
of	(NP\NP)/NP	#x.#y.is(x,at(y))	0.0
of	(NP\NP)/NP	#x.#y.#z.z @ is(x,at(y))	0.0
of	(NP\NP)/NP	l(x,x)	-1.0
on	(NP\NP)/NP	#x.at(x)	0.0
on	(NP\NP)/NP	#x.#y.turn(until(is(y,x)))	0.0
on	(NP\NP)/NP	#x.#y.#z.is(y,at(x,z))	0.0
on	(S\NP)/NP	#x473.#x472.turn(until(is(x472,x473)))	-1.0
on	(S\NP)/NP	#x474.#x472.turn(until(is(x472,at(x474))))	-1.0
a	NP/N	#x.x	0.0
a	NP/N	#x615.#x611.#x605.#x603.x603 @ that(is(x615,at(x605,x611)))	-1.0
a	NP/N	#x616.#x612.#x606.#x604.x604 @ verify(that(is(x616,at(x606,x612))))	-1.0
a	NP/N	#x.x @ a	-1.0
a	NP/N	l(x,x)	-1.0
move	S/NP	#x.move(x)	0.0
move	S/NP	l(x,x)	-1.0
go	S/NP	#x.move(x)	0.0
go	S/NP	#x.go(x)	-1.0
go	S/NP	l(x,x)	-1.0
lamp	N	lamp	0.0
right	N	right	0.0
right	NP	right	-1.0
grey	N/N	#x.x @ grey	0.0
grey	N/N	#x619.#x612.#x606.#x604.x604 @ verify(that(is(x619 @ grey,at(x606,x612))))	-1.0
grey	N/N	#x617.#x611.#x605.#x603.x603 @ that(is(x617 @ grey,at(x605,x611)))	-1.0
grey	N/N	#x485.#x475.turn(until(is(x485 @ grey,x475)))	-1.0
grey	N/N	#x489.#x477.turn(until(is(x489 @ grey,at(x477))))	-1.0
grey	N/N	l(x,x)	-1.0
potted	N/N	#x.x @ potted	0.0
potted	N/N	#x619.#x612.#x606.#x604.x604 @ verify(that(is(x619 @ potted,at(x606,x612))))	-1.0
potted	N/N	#x617.#x611.#x605.#x603.x603 @ that(is(x617 @ potted,at(x605,x611)))	-1.0
potted	N/N	#x485.#x475.turn(until(is(x485 @ potted,x475)))	-1.0
potted	N/N	#x489.#x477.turn(until(is(x489 @ potted,at(x477))))	-1.0
potted	N/N	l(x,x)	-1.0
the	NP/N	#x.at(x)	0.0
the	NP/N	#x.x	0.0
the	NP/N	#x482.#x475.turn(until(is(x482,x475)))	-1.0
the	NP/N	#x484.#x477.turn(until(is(x484,at(x477))))	-1.0
the	NP/N	#x616.#x612.#x606.#x604.x604 @ verify(ththet(is(x616,thet(x606,x612))))	-1.0
the	NP/N	#x.x @ the	-1.0
the	NP/N	#x615.#x611.#x605.#x603.x603 @ ththet(is(x615,thet(x605,x611)))	-1.0
the	NP/N	l(x,x)	-1.0
the	(NP/NP)/N	#x.x	0.0
the	(NP/NP)/N	#x.#y.y @ x	0.0
the	NP	#x.x	0.0
with	((N/N)/(N/N))\(S\NP)	#x.x	0.0
with	(NP\NP)/NP	#x.x	0.0
with	(NP\NP)/NP	#x.#y.y @ x	0.0
with	NP/NP	#x.x	0.0
with	NP/NP	#x479.#x475.turn(until(is(x479,x475)))	-1.0
with	NP/NP	#x481.#x477.turn(until(is(x481,at(x477))))	-1.0
face	S/NP	#x.turn(x)	0.0
face	S/NP	#x.face(x)	-1.0
face	S/NP	l(x,x)	-1.0
face	S/NP	#x745.#x469.x745 @ turn(x469)	-1.0
face	S/NP	#x727.#x467.x727 @ face(x467)	-1.0
blue	N/N	#x.x @ blue	0.0
painting	NP	#x.painting(x)	0.0
painting	N	#x.painting(x)	0.0
there	NP	#x.verify(x)	0.0
until	NP/NP	#x.until(x)	0.0
until	NP/NP	#x.x @ #y.until(y)	0.0
until	NP/NP	#x.#y.x @ until(y)	0.0
until	NP/NP	#x572.#x570.#x568.x568 @ until(x570,x572)	-1.0
until	NP/NP	#x571.#x569.until(x569,x571)	-1.0
until	NP/NP	#x587.#x574.x574 @ verify(thuntil(is(x587)))	-1.0
until	NP/NP	#x584.#x573.x573 @ thuntil(is(x584))	-1.0
until	NP/NP	l(x,x)	-1.0
front	NP	front	0.0
front	NP	#x.front(x)	-1.0
front	NP	l(x,x)	-1.0
to	(NP/NP)/NP	#x.x	0.0
to	((S\NP)\(S\NP))/NP	#x.#y.is(y,x)	0.0
to	((S\NP)\(S\NP))/NP	#x.#y.y @ x	0.0
to	((S\NP)\(S\NP))/NP	#x.#y.#z.z @ that(is(y,x))	0.0
to	((S\NP)\(S\NP))/NP	l(x,x)	-1.0
to	(NP\NP)/NP	#x.at(x)	0.0
to	(NP\NP)/NP	#x.#y.y @ at(x)	0.0
to	(NP\NP)/NP	#x.#y.y @ x	0.0
to	(NP\NP)/NP	#x491.#x478.turn(until(is(x478,x491)))	-1.0
to	(NP\NP)/NP	#x492.#x478.turn(until(is(x478,at(x492))))	-1.0
to	NP/NP	#x572.#x570.#x568.x568 @ to(x570,x572)	-1.0
to	NP/NP	#x.to(x)	-1.0
to	NP/NP	#x.x @ #y.to(y)	-1.0
to	NP/NP	#x.#y.x @ to(y)	-1.0
to	NP/NP	#x571.#x569.to(x569,x571)	-1.0
to	NP/NP	#x587.#x574.x574 @ verify(thto(is(x587)))	-1.0
to	NP/NP	#x584.#x573.x573 @ thto(is(x584))	-1.0
to	NP/NP	l(x,x)	-1.0
to	NP/NP	#x870.x870	-1.0
wall	NP	#x.wall(x)	0.0
wall	N	#x.wall(x)	0.0
open	N/N	#x.x @ open	0.0
open	N/N	#x485.#x475.turn(until(is(x485 @ open,x475)))	-1.0
open	N/N	#x489.#x477.turn(until(is(x489 @ open,at(x477))))	-1.0
walk	S/NP	#x.move(x)	0.0
walk	S/NP	#x.#y.move(x @ y)	0.0
walk	S/NP	#x.walk(x)	-1.0
walk	S/NP	l(x,x)	-1.0
walk	(S\NP)/NP	#x.#y.move(x @ y)	0.0
